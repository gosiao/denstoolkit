#!/bin/bash
thisScriptName=$0
usage()
{
echo -e "\n    usage: \033[1m$1 [option [value(s)]] ... [option [value(s)]]\033[0m"
cat << END_USAGE_TEXT

This script help to compute NCI field and make a cube with NCIplot
specifications and generate a file would be read with VMD program.

Options 
  -h           Display the help menu.
  -w wf?name   Wavefunctions name
  -l        	Write cpu time, input/output information etc. on a log file
  -n  dim   	Set the number of points per direction for the cube
            	  to be dim x dim x dim.
  -s        	Use a smart cuboid for the grid. The number of points for the
            	  largest direction will be 80.
  -S ln     	Use a smart cuboid for the grid. ln is the number of points
            	  the largest axis will have. The remaining axes will have
            	  a number of points proportional to its length.
  -r num       Lower limit of rho 
  -R num       High  limit of rho 
  -G num       High  limit of GrdRedRho


END_USAGE_TEXT
}
print_vmd_script()
{
   the_rho_file_name=$1
   the_red_grad_file_name=$2
   the_red_grad_value=$3
   the_rho_value=$4
cat << END_VMD_SCRIPT
#!/usr/local/bin/vmd

#VMD script written by save_state Revision: 1.41 $
#VMD version: 1.8.6
set viewplist
set fixedlist
# Display settings
display projection Orthographic
display nearclip set 0.000000
# load new molecule
mol new $the_red_grad_file_name type cube first 0 last -1 step 1 filebonds 1 autobonds 1 waitfor all
mol addfile $the_rho_file_name type cube first 0 last -1 step 1 filebonds 1 autobonds 1 waitfor all
#
# representation of the atoms
mol delrep 0 top
mol representation CPK 1.000000 0.300000 118.000000 131.000000
mol color Name
mol selection {all}
mol material Opaque
mol addrep top
#
# add representation of the surface
mol representation Isosurface $the_red_grad_value 1 0 0 1 1
mol color Volume 0
mol selection {all}
mol material Opaque
mol addrep top
mol selupdate 1 top 0
mol colupdate 1 top 0
mol scaleminmax top 1 -$the_rho_value $the_rho_value
mol smoothrep top 1 0
mol drawframes top 1 {now}
color scale method BGR
set colorcmds {{color Name {C} gray}}
#some more

END_VMD_SCRIPT
}
#computes the cube files.
compute_cubes() {
   the_wf_file_name="$1"
   the_cube_args="$2"
   the_limits_of_compute_cubes="$3"
   echo "####################################"
   echo -e "\tStarting NCI cube evaluation"
   echo "####################################"
   #computes NCI--Rho
   launcher1="dtkcube $the_wf_file_name $the_cube_args -p z $the_limits_of_compute_cubes"
   echo $launcher1
   $launcher1
   #computes NCI--RedGrad
   launcher2="dtkcube $the_wf_file_name $the_cube_args -p Z $the_limits_of_compute_cubes"
   echo $launcher2
   $launcher2
}
#Prints all values of a cube as a single column
cube_to_column(){
   cube_file="$1"
   let number_of_atoms=$(sed -n '3p' "$cube_file"| awk '{print $1;}')+6
   awk '{if (NR>'$number_of_atoms'){print $0;}}' $cube_file | awk '$1=$1'|tr [:space:] "\n"
}
#Makes a plot using gnuplot
make_plot(){
   dat_file_name=$1
   pdf_file_name=${dat_file_name%dat}pdf
   gnuplot <<-EOFMarker
      set xlabel '{/Symbol r}'
      set ylabel 's' offset character 2,0
      set xrange [-0.2:0.2]
      set yrange [0.0:2.0]
      set tics font ",8"
      set xtics 0.05
      set ytics 0.1
      set grid ytics
      set grid xtics mxtics 
      set mxtics 5
      set term postscript eps enhanced color linewidth 2 fontscale 1.5
      set output '|epstopdf --filter --outfile="$pdf_file_name"'
      plot "$dat_file_name" w p pt 7 ps 0.5 lc rgb "red" title "NCI" 
EOFMarker
}
#Makes a plot of GrdRedRho vs Rho
plot_redgradrho_vs_rho() {
   data_cube_GradRedRho="$1"
   data_cube_Rho="$2"
   data_plot_NCI="${3}NCI-PlotSvsRho.dat"
   tmp_dat_rho_file=${RANDOM}${RANDOM}
   tmp_dat_s_file=${RANDOM}${RANDOM}
   cube_to_column $data_cube_Rho > $tmp_dat_rho_file
   cube_to_column $data_cube_GradRedRho > $tmp_dat_s_file
   paste $tmp_dat_s_file $tmp_dat_rho_file > $data_plot_NCI 
   rm $tmp_dat_rho_file; rm $tmp_dat_s_file
   make_plot $data_plot_NCI
}

if [ $# -lt 1 ]
then
   echo -e "\033[1m\033[31mError:\033[0m Invalid syntax! (Try $thisScriptName -h for more information.)."
   exit 2
fi

cubeArgsString=""
# Default values for limits of cubes to be will compute
minRho="0.0005"
maxRho="0.2"
maxGrdRedRho="2.0"
while getopts ":hw:ln:sS:r:R:G:" opt; do
  case $opt in
    h)
      usage $0
      exit 0
      ;;
    w)
      wavefunctionFileName="$OPTARG"
      ;;
    l)
      cubeArgsString="$cubeArgsString -l"
      ;;
    n)
      cubeArgsString="$cubeArgsString -n $OPTARG"
      ;;
    s)
       cubeArgsString="$cubeArgsString -s"
      ;;
    S)
      cubeArgsString="$cubeArgsString -S $OPTARG"
      ;;
    r)
      minRho="$OPTARG"
      ;;
    R)
      maxRho="$OPTARG"
      ;;
    G)
      maxGrdRedRho="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [ -z "$wavefunctionFileName" ]
then
   echo -e "\033[1m\033[31mError:\033[0m Wavefuntion file name missing" 
   echo -e "\tTry \n\t\t$thisScriptName -h\n\tfor more information."
   exit 2
fi

cutoffArgString="--configure-nci $minRho $maxRho $maxGrdRedRho"

#This final extension was acquired from scr/common/fldtypesdef.h file of the function getFieldTypeKeyShort
baseFileName=${wavefunctionFileName%.wf?}
cubeRedGradFileName="${baseFileName}NCIRedDensGrad.cub"
cubeRhoFileName="${baseFileName}NCIRho.cub"

#Checks whether cubes are present.
if [ -f "$cubeRedGradFileName" -a -f "$cubeRhoFileName" ]
then
   echo -e "The needed cube files are already present ($cubeRedGradFileName and $cubeRhoFileName)"
   echo "Do you wish to compute them again?"
   select answer in "Yes=1" "No=2"
   do
      case $answer in 
         Yes=1 )
            compute_cubes "$wavefunctionFileName" "$cubeArgsString" "$cutoffArgString"
            break;;
         No=2 )
            echo -e "Skipping cube calculation...\n"
            break;;
      esac
   done
else
   compute_cubes "$wavefunctionFileName" "$cubeArgsString" "$cutoffArgString"
fi
#
#Names of VMD script files
outputVMDFileName="${baseFileName}.vmd"
#Asks and saves the current directory (VMD sometimes needs absolute paths)
currentWD=$(pwd)
#
#Makes the VMD scripts.
echo -e "Making VMD scripts..."
print_vmd_script "$currentWD/$cubeRhoFileName" "$currentWD/$cubeRedGradFileName" 0.500000 0.050000 > "$currentWD/$outputVMDFileName"

echo -e "Making s vs rho plot..."
plot_redgradrho_vs_rho "$currentWD/$cubeRedGradFileName" "$currentWD/$cubeRhoFileName" "$currentWD/$baseFileName"

