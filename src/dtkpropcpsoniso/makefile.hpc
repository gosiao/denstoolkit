# COMPILERS OPTIONS

# Aditional optimization flags
LOCAL_OPTIMFLAGS = 

# Replace flag
NEW_FLAG = 
OLD_FLAG = 

# Aditional Debug and Profile build flags
ifeq ($(DEBUGVERSION),1)
   LOCAL_CXXFLAGS     +=
else
   ifeq ($(PROFILEVERSION),1)
      LOCAL_CXXFLAGS     += $(LOCAL_OPTIMFLAGS)
   else
      LOCAL_CXXFLAGS     += $(LOCAL_OPTIMFLAGS)
   endif
endif

# Additional linking and include flags
# -L: FOLDER LIBRARY
LFLAGS +=  #-L/usr/lib
LFLAGS +=  #-L.

# -l: LIBRARY
lLIBS +=   #-lgfnl_util
lLIBS +=   #-lapr-1 -laprutil-1 -llog4cxx

# -I: INCLUDES
IFLAGS += 

#################################################################################
#################################################################################
TOP      = $(shell pwd)

MYMAKEFLAGS := DEBUGVERSION=$(DEBUGVERSION) PROFILEVERSION=$(PROFILEVERSION) 

# FILES
CPPOBJS=$(patsubst %.cpp,%.o,$(wildcard *.cpp))
CCOBJS=$(patsubst %.cc,%.o,$(wildcard *.cc))
OBJS= $(CPPOBJS) $(CCOBJS)
HEADERS=$(wildcard *.h)
SOURCES=$(wildcard *.cpp *.cc)
LIBOBJS=$(shell echo $(OBJS))
COMMONSTATICLIBNAME=$(shell cd ../..; pwd | sed -e 's;\(.*\)/\(.*\);\2;')
COMMONHEADERS=$(shell ls ../common/*.h)
COMMONSOURCES=$(shell ls ../common/*.cpp)
STATICLIB=$(TOP)/../common/lib$(COMMONSTATICLIBNAME).a
STATICOBJS=$(shell for i in $$(ls ../common/*cpp);do echo $${i%cpp}o;done)
TESTEXECS=$(patsubst %.cc,%.x,$(wildcard *.cc))

ARCHIVE      := ar
ARCHFLAG     := -rc

# -L: FOLDER LIBRARY
	LFLAGS+=#-L$(TOP)/../common/
	LFLAGS+=#-L.

# -l: LIBRARY
	lLIBS+=#-l$(COMMONSTATICLIBNAME)

# -I: INCLUDES
	IFLAGS+=-I. -I$(TOP)/../common/ -include ../common/globaldefs.h -include localdefs.h

ifndef MAKE_SRC
    CXX = $(shell $(MAKE) -s -C .. -f makefile.hpc loadVarCXX )
    CXXFLAGS = $(shell $(MAKE) -s -C .. -f makefile.hpc $(MYMAKEFLAGS) loadVarCXXFLAGS )
	 lLIBS += $(shell $(MAKE) -s -C .. -f makefile.hpc $(MYMAKEFLAGS) loadVarlLIBS )
endif

CXXFLAGS += $(LOCAL_CXXFLAGS)

# Replace the old flag with the new
TMPFLAGS := $(filter-out $(OLD_FLAG),$(CXXFLAGS))
CXXFLAGS := $(TMPFLAGS) $(NEW_FLAG)
TARGET=target

$(TARGET): $(OBJS) $(TESTEXECS) $(STATICLIB)

$(CPPOBJS): %.o: %.cpp %.h
	@echo "\033[32m   Compiling $@\\033[m"
	$(CXX) $(CXXFLAGS) -c $< -o $@  $(IFLAGS) 

$(CCOBJS): %.o: %.cc $(COMMONHEADERS) $(HEADERS)
	@echo "\033[32m   Compiling $@\\033[m"
	$(CXX) $(CXXFLAGS) -c $<  -o $@  $(IFLAGS) 

$(TESTEXECS): %.x: %.o $(STATICLIB) $(CCOBJS) $(CPPOBJS) $(SOURCES) $(HEADERS) $(COMMONHEADERS) $(COMMONSOURCES)
	@echo "\033[32m   Linking $@\\033[m"
	$(CXX) $(LFLAGS) $(OPTIMFLAGS) $< $(CPPOBJS) $(STATICOBJS) -o $@ $(lLIBS)

$(STATICLIB): $(COMMONHEADERS) $(COMMONSOURCES)
	@echo "\033[32mBuilding lib$(COMMONSTATICLIBNAME).a\\033[m"
	@cd $(TOP)/../common/;make -f makefile.hpc $(MYMAKEFLAGS)

.PHONY: clean
clean:
	$(info CLEANING ALL)
	@$(RM) -f $(TARGET) $(OBJS) $(TESTEXECS) 2>/dev/null || true

fullclean: clean
	@cd ../common/;make -f makefile.hpc clean

.PHONY: help
help: ## Shows this help
	@echo '=================================================================================='
	@echo 'usage: make [target] ...'
	@echo '=================================================================================='
	@echo ''
	@echo 'targets:'
	@egrep -e '^(.+)\:\ .*##\ (.+)' ${MAKEFILE_LIST} | sed 's/:.*##/#/' | column -t -c 2 -s '#'
	@echo ''
	@echo '=================================================================================='

list:
	@echo $(OBJS)
	@echo $(HEADERS)

listobjs:
	@echo $(LIBOBJS)

liststatic:
	@echo $(STATICOBJS)

